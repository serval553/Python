class Node:
    def __init__(self, data):
        self.data = data
        self.prev = None  # ссылка на предыдущий элемент
        self.next = None  # ссылка на следующий элемент

class DoublyLinkedList:
    def __init__(self):
        self.head = None  # начальный элемент списка

    def append(self, data):
        new_node = Node(data)
        if self.head is None:  # если список пустой, новый элемент становится начальным
            self.head = new_node
        else:
            current = self.head
            while current.next:
                current = current.next
            current.next = new_node  # добавляем новый элемент в конец списка
            new_node.prev = current  # обновляем ссылку на предыдущий элемент для нового элемента

    def prepend(self, data):
        new_node = Node(data)
        if self.head is None:  # если список пустой, новый элемент становится начальным
            self.head = new_node
        else:
            new_node.next = self.head
            self.head.prev = new_node
            self.head = new_node  # новый элемент становится начальным

   def delete(self, data):  # Метод для удаления элемента из списка
        current = self.head  # Начинаем с начального
        while current:  # Пока не достигнут конец списка
            if current.data == data:  # Если значение текущего элемента соответствует искомому значению
                if current.prev:  # Если у текущего элемента есть предыдущий
                    current.prev.next = current.next  # Обновляем ссылку на следующий для предыдущего элемента
                else:  # Иначе, если текущий элемент является начальным
                    self.head = current.next  # Обновляем начальный элемент
                if current.next:  # Если у текущего элемента есть следующий элемент
                    current.next.prev = current.prev  # Обновляем ссылку на предыдущий элемент для следующего
                return  # Возвращаемся после удаления элемента
            current = current.next  # Переходим к следующему элементу

    def display_from_beginning(self):  # Метод для отображения элементов списка с начала
        elements = [] # Создаем пустой список для элементов
        current = self.head
        while current: # Пока не достигнут конец списка
            elements.append(current.data) # Добавляем значение текущего узла в список элементов
            current = current.next
        print("Список с начала", elements)

    def display_from_end(self):  # Метод для отображения элементов списка с конца
        elements = []  # Создаем пустой список для элементов
        current = self.head  # Начинаем с начального элемента
        while current.next:  # Пока не достигнут конец списка
            current = current.next  # Переходим к следующему элементу, чтобы найти конец списка
        while current:  # Итеративно проходим с конца к началу
            elements.append(current.data)  # Добавляем значение текущего элемента в список элементов
            current = current.prev  # Переходим к предыдущему элементу
        print("List from end:", elements)  # Отображаем список элементов с конца

    def find(self, data): # Метод для поиска элемента в списке
        index = 0
        current = self.head
        while current:
            if current.data == data: # Если значение текущего соответствует искомому значению
                return f"Элемент, найденный по индексу {index}" # Возвращаем сообщение о найденном индексе
            current = current.next # Переходим к следующему узлу
            index += 1 # Увеличиваем индекс на 1
        return "Элемент не найден"


# Пример использования
dll = DoublyLinkedList()
dll.append(1)
dll.append(2)
dll.append(3)
dll.prepend(0)
dll.display_from_beginning()  # Отображаем список с начала
dll.display_from_end()  # Отображаем список с конца
print(dll.find(2))  # Находим элемент
dll.delete(1) # Удаление элемента списка
dll.display_from_beginning()  # Отображаем измененный список с начала
