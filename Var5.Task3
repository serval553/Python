class Node:
    def __init__(self, data):
        self.data = data
        self.prev = None  # ссылка на предыдущий элемент
        self.next = None  # ссылка на следующий элемент

class DoublyLinkedList:
    def __init__(self):
        self.head = None  # начальный элемент списка

    def append(self, data):
        new_node = Node(data)
        if self.head is None:  # если список пустой, новый элемент становится начальным
            self.head = new_node
        else:
            current = self.head
            while current.next:
                current = current.next
            current.next = new_node  # добавляем новый элемент в конец списка
            new_node.prev = current  # обновляем ссылку на предыдущий элемент для нового элемента

    def prepend(self, data):
        new_node = Node(data)
        if self.head is None:  # если список пустой, новый элемент становится начальным
            self.head = new_node
        else:
            new_node.next = self.head
            self.head.prev = new_node
            self.head = new_node  # новый элемент становится начальным

    def delete(self, data): # Удаление элемента из списка
        current = self.head
        while current:
            if current.data == data:
                if current.prev:
                    current.prev.next = current.next
                else:
                    self.head = current.next
                if current.next:
                    current.next.prev = current.prev
                return
            current = current.next

    def display_from_beginning(self):  #создает список элементов, начиная с начального.
        elements = []
        current = self.head
        while current:
            elements.append(current.data)
            current = current.next
        print("Список с начала", elements)

    def display_from_end(self): #создает список элементов, начиная с конечного.
        elements = []
        current = self.head
        while current.next:
            current = current.next
        while current:
            elements.append(current.data)
            current = current.prev
        print("Список с конца:", elements)

    def find(self, data):
        index = 0
        current = self.head
        while current:
            if current.data == data:
                return f"Элемент, найденный по индексу {index}"
            current = current.next
            index += 1
        return "Элемент не найден"


# Пример использования
dll = DoublyLinkedList()
dll.append(1)
dll.append(2)
dll.append(3)
dll.prepend(0)
dll.display_from_beginning()  # Отображаем список с начала
dll.display_from_end()  # Отображаем список с конца
print(dll.find(2))  # Находим элемент
dll.delete(1) # Удаление элемента списка
dll.display_from_beginning()  # Отображаем измененный список с начала
