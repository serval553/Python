import email
from email import policy
from email.parser import BytesParser
import dns.resolver
import extract_msg
import os

def get_mx_records(domain):
    try:
        mx_records = dns.resolver.resolve(domain, 'MX')
        return [str(record.exchange) for record in mx_records]
    except (dns.resolver.NoAnswer, dns.resolver.NXDOMAIN):
        return None  # MX-записи не найдены.
    except Exception as e:
        print(f"Ошибка при получении MX-записей для {domain}: {e}")
        return None

def parse_email_headers(msg_file):
    headers = {}

    if msg_file.lower().endswith('.msg'):
        # Извлечение данных из .msg файла.
        msg = extract_msg.Message(msg_file)
        headers = {
            'From': msg.sender,
            'To': msg.to,
            'Subject': msg.subject,
            'Date': msg.date,
            'Message-ID': msg.message_id,
            'Return-Path': msg.return_path,
            'Received': msg.received,
            'Body': msg.body,  # Тело письма
        }
    elif msg_file.lower().endswith('.eml'):
        # Открываем файл с письмом в формате .eml.
        with open(msg_file, 'rb') as f:
            msg = BytesParser(policy=policy.default).parse(f)
            headers = {
                'From': msg['From'],
                'To': msg['To'],
                'Subject': msg['Subject'],
                'Date': msg['Date'],
                'Message-ID': msg['Message-ID'],
                'Return-Path': msg['Return-Path'],
                'Received': msg.get_all('Received'),
                'Body': msg.get_body(preferencelist=('plain')).get_content(),  # Тело письма
            }
    else:
        print("Неподдерживаемый формат файла.")
        return None

    # Извлекаем информацию о 'Received: from'
    received_from = []
    if headers.get('Received'):
        for received in headers['Received']:
            if 'from ' in received:
                domain = received.split('from ')[1].split(' ')[0]
                received_from.append(domain)
                mx_records = get_mx_records(domain)

                if mx_records:
                    print(f"MX-записи для домена '{domain}': {', '.join(mx_records)}")
                else:
                    print(f"MX-записи для домена '{domain}' не найдены.")

    headers['Received: from'] = received_from
    return headers

def convert_msg_to_eml(msg_file, eml_file):
    # Парсим заголовки и тело письма
    headers = parse_email_headers(msg_file)
    
    if headers is None:
        print("Ошибка при парсинге письма.")
        return

    # Формируем содержимое для .eml файла
    eml_content = f"From: {headers['From']}\n"
    eml_content += f"To: {headers['To']}\n"
    eml_content += f"Subject: {headers['Subject']}\n"
    eml_content += f"Date: {headers['Date']}\n"
    eml_content += f"Message-ID: {headers['Message-ID']}\n"
    eml_content += f"Return-Path: {headers['Return-Path']}\n"

    if headers.get('Received'):
        for received in headers['Received']:
            eml_content += f"Received: {received}\n"

    eml_content += "\n"  # Пустая строка перед телом
    eml_content += headers['Body']  # Добавляем тело письма

    # Записываем содержимое в .eml файл
    with open(eml_file, 'w', encoding='utf-8') as f:
        f.write(eml_content)

    print(f"Файл .eml успешно создан: {eml_file}")

# Пример использования
if __name__ == "__main__":
    email_file_path = 'path/to/your/email.msg'  # Укажите путь к вашему .msg файлу
    eml_file_path = 'path/to/your/email.eml'  # Укажите путь для сохранения .eml файла

    convert_msg_to_eml(email_file_path, eml_file_path)















def extract_fields_from_txt(txt_file):
    headers = {}
    with open(txt_file, 'r', encoding='utf-8') as f:
        # Читаем все строки из файла
        lines = f.readlines()

    # Обрабатываем строки
    for line in lines:
        # Ищем заголовки
        if line.startswith("From:"):
            headers['From'] = line[len("From:"):].strip()
        elif line.startswith("To:"):
            headers['To'] = line[len("To:"):].strip()
        elif line.startswith("Subject:"):
            headers['Subject'] = line[len("Subject:"):].strip()
        elif line.startswith("Date:"):
            headers['Date'] = line[len("Date:"):].strip()
        elif line.startswith("Message-ID:"):
            headers['Message-ID'] = line[len("Message-ID:"):].strip()
        elif line.startswith("Return-Path:"):
            headers['Return-Path'] = line[len("Return-Path:"):].strip()

    return headers

if __name__ == "__main__":
    txt_file_path = 'path/to/your/email.txt'  # Укажите путь к вашему .txt файлу
    headers = extract_fields_from_txt(txt_file_path)

    # Печать результатов
    print(f"From: {headers.get('From', 'Not found')}")
    print(f"To: {headers.get('To', 'Not found')}")
    print(f"Subject: {headers.get('Subject', 'Not found')}")
    print(f"Date: {headers.get('Date', 'Not found')}")
    print(f"Message-ID: {headers.get('Message-ID', 'Not found')}")
    print(f"Return-Path: {headers.get('Return-Path', 'Not found')}")

